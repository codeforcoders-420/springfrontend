import org.apache.pdfbox.pdmodel.PDDocument;
import org.apache.pdfbox.text.PDFTextStripper;
import org.apache.poi.ss.usermodel.*;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;

import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

public class PDFTableExtractor {
    public static void main(String[] args) throws IOException {
        File pdfFile = new File("path/to/your/pdf-file.pdf");
        File excelFile = new File("path/to/save/extracted-tables.xlsx");

        // Load PDF document
        try (PDDocument document = PDDocument.load(pdfFile)) {
            PDFTextStripper stripper = new PDFTextStripper();

            // Use a list to store rows of the table we extract
            List<List<String>> tableRows = new ArrayList<>();

            // Process each page
            for (int i = 1; i <= document.getNumberOfPages(); i++) {
                stripper.setStartPage(i);
                stripper.setEndPage(i);

                String pageText = stripper.getText(document);

                // Check if this page contains the specific headers
                if (pageText.contains("Code") && pageText.contains("Mod1") &&
                    pageText.contains("Mod2") && pageText.contains("Mod3") &&
                    pageText.contains("Mod4") && pageText.contains("Rates")) {

                    // Use a regular expression or manual parsing to extract table rows
                    List<String> rows = extractTableRows(pageText);
                    for (String row : rows) {
                        // Split by whitespace, tabs, or commas based on your table's format
                        String[] columns = row.split("\\s+");
                        tableRows.add(List.of(columns));
                    }
                }
            }

            // Write extracted table data to Excel
            writeDataToExcel(tableRows, excelFile);
        }
    }

    private static List<String> extractTableRows(String pageText) {
        // Add code here to identify the rows of the table based on specific patterns.
        // This can be a custom regular expression or any other logic to find rows.
        List<String> rows = new ArrayList<>();
        // Sample logic to get rows:
        String[] lines = pageText.split("\n");
        boolean inTable = false;
        for (String line : lines) {
            if (line.contains("Code") && line.contains("Rates")) {
                inTable = true; // Start of the table
            } else if (inTable && line.trim().isEmpty()) {
                break; // End of the table
            } else if (inTable) {
                rows.add(line);
            }
        }
        return rows;
    }

    private static void writeDataToExcel(List<List<String>> tableRows, File excelFile) throws IOException {
        Workbook workbook = new XSSFWorkbook();
        Sheet sheet = workbook.createSheet("Extracted Table");

        int rowNum = 0;
        for (List<String> rowData : tableRows) {
            Row row = sheet.createRow(rowNum++);
            int colNum = 0;
            for (String cellData : rowData) {
                Cell cell = row.createCell(colNum++);
                cell.setCellValue(cellData);
            }
        }

        try (FileOutputStream outputStream = new FileOutputStream(excelFile)) {
            workbook.write(outputStream);
        }
    }
}

<dependency>
    <groupId>org.apache.pdfbox</groupId>
    <artifactId>pdfbox</artifactId>
    <version>2.0.27</version>
</dependency>
<dependency>
    <groupId>org.apache.poi</groupId>
    <artifactId>poi</artifactId>
    <version>5.2.3</version>
</dependency>
<dependency>
    <groupId>org.apache.poi</groupId>
    <artifactId>poi-ooxml</artifactId>
    <version>5.2.3</version>
</dependency>


*****************************************************************************

import technology.tabula.Page;
import technology.tabula.Table;
import technology.tabula.extractors.SpreadsheetExtractionAlgorithm;
import technology.tabula.extractors.ExtractionAlgorithm;
import technology.tabula.ObjectExtractor;
import technology.tabula.PageIterator;
import org.apache.pdfbox.pdmodel.PDDocument;
import org.apache.poi.ss.usermodel.*;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;

import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.util.List;

public class PDFTableToExcel {
    public static void main(String[] args) {
        String pdfFilePath = "path/to/your/500-page-document.pdf";
        String excelFilePath = "path/to/save/extracted-tables.xlsx";
        int targetPage = 50; // Set this to the specific page you need

        try {
            // Load PDF Document
            PDDocument document = PDDocument.load(new File(pdfFilePath));
            ObjectExtractor extractor = new ObjectExtractor(document);

            // Specify the target page for table extraction
            Page page = extractor.extract(targetPage);
            ExtractionAlgorithm algo = new SpreadsheetExtractionAlgorithm();

            // Extract tables from the specified page
            List<Table> tables = algo.extract(page);
            document.close();

            // Write the extracted tables to Excel
            writeTablesToExcel(tables, excelFilePath);
            System.out.println("Table extracted and saved to Excel successfully!");

        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private static void writeTablesToExcel(List<Table> tables, String excelFilePath) throws IOException {
        Workbook workbook = new XSSFWorkbook();
        Sheet sheet = workbook.createSheet("Extracted Table");

        int rowNum = 0;
        for (Table table : tables) {
            for (int i = 0; i < table.getRowCount(); i++) {
                Row row = sheet.createRow(rowNum++);
                for (int j = 0; j < table.getColCount(); j++) {
                    Cell cell = row.createCell(j);
                    cell.setCellValue(table.getCell(i, j).getText());
                }
            }
        }

        try (FileOutputStream outputStream = new FileOutputStream(excelFilePath)) {
            workbook.write(outputStream);
        }
    }
}

<dependency>
    <groupId>org.apache.pdfbox</groupId>
    <artifactId>pdfbox</artifactId>
    <version>2.0.27</version>
</dependency>
<dependency>
    <groupId>technology.tabula</groupId>
    <artifactId>tabula</artifactId>
    <version>1.0.4</version>
</dependency>
<dependency>
    <groupId>org.apache.poi</groupId>
    <artifactId>poi</artifactId>
    <version>5.2.3</version>
</dependency>
<dependency>
    <groupId>org.apache.poi</groupId>
    <artifactId>poi-ooxml</artifactId>
    <version>5.2.3</version>
</dependency>


*************************************************************************************

import technology.tabula.Page;
import technology.tabula.Table;
import technology.tabula.extractors.SpreadsheetExtractionAlgorithm;
import technology.tabula.extractors.ExtractionAlgorithm;
import technology.tabula.ObjectExtractor;
import org.apache.pdfbox.pdmodel.PDDocument;
import org.apache.poi.ss.usermodel.*;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;

import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.util.List;

public class PDFTableToExcel {
    public static void main(String[] args) {
        String pdfFilePath = "path/to/your/500-page-document.pdf";
        String excelFilePath = "path/to/save/extracted-tables.xlsx";
        int targetPage = 25; // Set to the specific page with the required table

        try {
            // Load PDF Document
            PDDocument document = PDDocument.load(new File(pdfFilePath));
            ObjectExtractor extractor = new ObjectExtractor(document);

            // Specify the target page for table extraction
            Page page = extractor.extract(targetPage);
            ExtractionAlgorithm algo = new SpreadsheetExtractionAlgorithm();

            // Extract tables from the specified page
            List<Table> tables = algo.extract(page);
            document.close();

            // Filter tables by headers and export matching tables to Excel
            for (Table table : tables) {
                if (isTargetTable(table)) { // Check if this table has the required headers
                    writeTableToExcel(table, excelFilePath);
                    System.out.println("Target table extracted and saved to Excel successfully!");
                    break; // Stop after finding the first matching table
                }
            }

        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private static boolean isTargetTable(Table table) {
        // Check if the first row contains the required headers
        if (table.getRowCount() > 0) {
            String firstRowText = String.join(",", table.getRow(0).stream().map(cell -> cell.getText()).toArray(String[]::new));
            return firstRowText.contains("Code") &&
                   firstRowText.contains("Mod 1") &&
                   firstRowText.contains("Mod 2") &&
                   firstRowText.contains("Mod 3") &&
                   firstRowText.contains("Rates");
        }
        return false;
    }

    private static void writeTableToExcel(Table table, String excelFilePath) throws IOException {
        Workbook workbook = new XSSFWorkbook();
        Sheet sheet = workbook.createSheet("Extracted Table");

        // Write the table content to Excel
        int rowNum = 0;
        for (int i = 0; i < table.getRowCount(); i++) {
            Row row = sheet.createRow(rowNum++);
            for (int j = 0; j < table.getColCount(); j++) {
                Cell cell = row.createCell(j);
                cell.setCellValue(table.getCell(i, j).getText());
            }
        }

        try (FileOutputStream outputStream = new FileOutputStream(excelFilePath)) {
            workbook.write(outputStream);
        }
    }
}

*****************************************************************************************************

package pdftpexcel.extractdatafromexcel;

import org.apache.poi.ss.usermodel.*;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;

import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;

public class ExcelDataConverter {

    public static void main(String[] args) {
    	String inputFilePath = "C:\\Users\\rajas\\Desktop\\PROV\\convertedpage1.xlsx";
        String outputFilePath = "C:\\Users\\rajas\\Desktop\\PROV\\table1.xlsx";

        try {
            // Open the input Excel file
            FileInputStream inputStream = new FileInputStream(inputFilePath);
            Workbook inputWorkbook = new XSSFWorkbook(inputStream);
            Sheet inputSheet = inputWorkbook.getSheetAt(0);

            // Open the output Excel file
            FileInputStream outputStream = new FileInputStream(outputFilePath);
            Workbook outputWorkbook = new XSSFWorkbook(outputStream);
            Sheet outputSheet = outputWorkbook.getSheetAt(0);

            int outputRowNum = 1; // Start writing from the second row in output

            // Determine the maximum number of columns in the sheet
            int maxColumns = 0;
            for (int i = 0; i <= inputSheet.getLastRowNum(); i++) {
                Row row = inputSheet.getRow(i);
                if (row != null) {
                    maxColumns = Math.max(maxColumns, row.getLastCellNum());
                }
            }

            // Column-wise search for the "code" header and subsequent "Mod" headers
            for (int col = 0; col < maxColumns; col++) {
                for (int row = 0; row <= inputSheet.getLastRowNum(); row++) {
                    Row currentRow = inputSheet.getRow(row);
                    if (currentRow == null) continue;

                    Cell cell = currentRow.getCell(col);
                    if (cell == null) continue;

                    // Check if this cell contains "code" (after normalizing whitespace)
                    if ("code".equalsIgnoreCase(normalizeWhitespace(getCellValue(cell)))) {
                        // Check if the following columns match "Mod 1", "Mod 2", "Mod 3", "Mod 4", "Rate"
                        if (isHeaderMatch(inputSheet, row, col)) {
                            // Extract data from the matched columns in the current block
                            for (int dataRowNum = row + 1; dataRowNum <= inputSheet.getLastRowNum(); dataRowNum++) {
                                Row dataRow = inputSheet.getRow(dataRowNum);
                                if (dataRow == null) continue;

                                Cell codeCell = dataRow.getCell(col);
                                if (codeCell == null || codeCell.getCellType() == CellType.BLANK) {
                                    // Stop processing this block if we encounter a blank code cell
                                    break;
                                }

                                // Create a new row in the output sheet
                                Row outputRow = outputSheet.createRow(outputRowNum++);

                                // Copy relevant data to output sheet
                                outputRow.createCell(0).setCellValue(getCellValue(dataRow.getCell(col)));       // Code
                                outputRow.createCell(1).setCellValue(getCellValue(dataRow.getCell(col + 1)));   // Mod 1
                                outputRow.createCell(2).setCellValue(getCellValue(dataRow.getCell(col + 2)));   // Mod 2
                                outputRow.createCell(3).setCellValue(getCellValue(dataRow.getCell(col + 3)));   // Mod 3
                                outputRow.createCell(4).setCellValue(getCellValue(dataRow.getCell(col + 4)));   // Mod 4
                                outputRow.createCell(5).setCellValue(getCellValue(dataRow.getCell(col + 5)));   // Rate
                            }
                        }
                    }
                }
            }

            // Write to output file
            FileOutputStream fileOut = new FileOutputStream(outputFilePath);
            outputWorkbook.write(fileOut);

            // Close resources
            fileOut.close();
            outputWorkbook.close();
            inputWorkbook.close();

            System.out.println("Data has been successfully extracted and written to the output file.");
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    // Helper method to check if the headers match the expected pattern starting from a specific row and column
    private static boolean isHeaderMatch(Sheet sheet, int startRow, int startCol) {
        return "code".equalsIgnoreCase(normalizeWhitespace(getCellValue(sheet.getRow(startRow).getCell(startCol)))) &&
               "Mod 1".equalsIgnoreCase(normalizeWhitespace(getCellValue(sheet.getRow(startRow).getCell(startCol + 1)))) &&
               "Mod 2".equalsIgnoreCase(normalizeWhitespace(getCellValue(sheet.getRow(startRow).getCell(startCol + 2)))) &&
               "Mod 3".equalsIgnoreCase(normalizeWhitespace(getCellValue(sheet.getRow(startRow).getCell(startCol + 3)))) &&
               "Mod 4".equalsIgnoreCase(normalizeWhitespace(getCellValue(sheet.getRow(startRow).getCell(startCol + 4)))) &&
               "Rate".equalsIgnoreCase(normalizeWhitespace(getCellValue(sheet.getRow(startRow).getCell(startCol + 5))));
    }

    // Helper method to get cell value as String
    private static String getCellValue(Cell cell) {
        if (cell == null) return "";
        switch (cell.getCellType()) {
            case STRING:
                return cell.getStringCellValue();
            case NUMERIC:
                return String.valueOf(cell.getNumericCellValue());
            case BOOLEAN:
                return String.valueOf(cell.getBooleanCellValue());
            case FORMULA:
                return cell.getCellFormula();
            default:
			
            default:
			
                return "";
        }
    }

    // Helper method to normalize whitespace
    private static String normalizeWhitespace(String value) {
        if (value == null) return "";
        return value.trim().replaceAll("\\s+", " ");
    }
}

*******************************************************************************************************************
import org.apache.poi.ss.usermodel.*;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;

public class ExcelDataBatchConverter {

    public static void main(String[] args) {
        String inputFolderPath = "/path/to/your/folder/with/excel/files"; // Specify the folder with Excel files
        String outputFilePath = "/path/to/output/folder/combined_output.xlsx";

        try {
            // Create the output workbook and sheet
            Workbook outputWorkbook = new XSSFWorkbook();
            Sheet outputSheet = outputWorkbook.createSheet("Combined Data");

            // Create the header row in the output sheet
            Row headerRow = outputSheet.createRow(0);
            headerRow.createCell(0).setCellValue("Code");
            headerRow.createCell(1).setCellValue("Mod 1");
            headerRow.createCell(2).setCellValue("Mod 2");
            headerRow.createCell(3).setCellValue("Mod 3");
            headerRow.createCell(4).setCellValue("Mod 4");
            headerRow.createCell(5).setCellValue("Rate");
            headerRow.createCell(6).setCellValue("Source File");

            int outputRowNum = 1; // Start writing from the second row in output

            // Get all Excel files in the specified folder
            File folder = new File(inputFolderPath);
            File[] excelFiles = folder.listFiles((dir, name) -> name.toLowerCase().endsWith(".xlsx"));

            if (excelFiles == null || excelFiles.length == 0) {
                System.out.println("No Excel files found in the specified folder.");
                return;
            }

            // Process each Excel file
            for (File file : excelFiles) {
                System.out.println("Processing file: " + file.getName());
                FileInputStream inputStream = new FileInputStream(file);
                Workbook inputWorkbook = new XSSFWorkbook(inputStream);
                Sheet inputSheet = inputWorkbook.getSheetAt(0);

                int maxColumns = 0;
                for (int i = 0; i <= inputSheet.getLastRowNum(); i++) {
                    Row row = inputSheet.getRow(i);
                    if (row != null) {
                        maxColumns = Math.max(maxColumns, row.getLastCellNum());
                    }
                }

                // Column-wise search for the "code" header and subsequent "Mod" headers
                for (int col = 0; col < maxColumns; col++) {
                    for (int row = 0; row <= inputSheet.getLastRowNum(); row++) {
                        Row currentRow = inputSheet.getRow(row);
                        if (currentRow == null) continue;

                        Cell cell = currentRow.getCell(col);
                        if (cell == null) continue;

                        // Check if this cell contains "code" (after normalizing whitespace)
                        if ("code".equalsIgnoreCase(normalizeWhitespace(getCellValue(cell)))) {
                            // Check if the following columns match "Mod 1", "Mod 2", "Mod 3", "Mod 4", "Rate"
                            if (isHeaderMatch(inputSheet, row, col)) {
                                // Extract data from the matched columns in the current block
                                for (int dataRowNum = row + 1; dataRowNum <= inputSheet.getLastRowNum(); dataRowNum++) {
                                    Row dataRow = inputSheet.getRow(dataRowNum);
                                    if (dataRow == null) continue;

                                    Cell codeCell = dataRow.getCell(col);
                                    if (codeCell == null || codeCell.getCellType() == CellType.BLANK) {
                                        // Stop processing this block if we encounter a blank code cell
                                        break;
                                    }

                                    // Create a new row in the output sheet
                                    Row outputRow = outputSheet.createRow(outputRowNum++);

                                    // Copy relevant data to output sheet
                                    outputRow.createCell(0).setCellValue(getCellValue(dataRow.getCell(col)));       // Code
                                    outputRow.createCell(1).setCellValue(getCellValue(dataRow.getCell(col + 1)));   // Mod 1
                                    outputRow.createCell(2).setCellValue(getCellValue(dataRow.getCell(col + 2)));   // Mod 2
                                    outputRow.createCell(3).setCellValue(getCellValue(dataRow.getCell(col + 3)));   // Mod 3
                                    outputRow.createCell(4).setCellValue(getCellValue(dataRow.getCell(col + 4)));   // Mod 4
                                    outputRow.createCell(5).setCellValue(getCellValue(dataRow.getCell(col + 5)));   // Rate
                                    outputRow.createCell(6).setCellValue(file.getName());                           // Source File
                                }
                            }
                        }
                    }
                }

                // Close the input workbook after processing
                inputWorkbook.close();
                inputStream.close();
            }

            // Write to the output file
            FileOutputStream fileOut = new FileOutputStream(outputFilePath);
            outputWorkbook.write(fileOut);

            // Close the output resources
            fileOut.close();
            outputWorkbook.close();

            System.out.println("Data has been successfully extracted from all files and written to the output file.");
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    // Helper method to check if the headers match the expected pattern starting from a specific row and column
    private static boolean isHeaderMatch(Sheet sheet, int startRow, int startCol) {
        return "code".equalsIgnoreCase(normalizeWhitespace(getCellValue(sheet.getRow(startRow).getCell(startCol)))) &&
               "Mod 1".equalsIgnoreCase(normalizeWhitespace(getCellValue(sheet.getRow(startRow).getCell(startCol + 1)))) &&
               "Mod 2".equalsIgnoreCase(normalizeWhitespace(getCellValue(sheet.getRow(startRow).getCell(startCol + 2)))) &&
               "Mod 3".equalsIgnoreCase(normalizeWhitespace(getCellValue(sheet.getRow(startRow).getCell(startCol + 3)))) &&
               "Mod 4".equalsIgnoreCase(normalizeWhitespace(getCellValue(sheet.getRow(startRow).getCell(startCol + 4)))) &&
               "Rate".equalsIgnoreCase(normalizeWhitespace(getCellValue(sheet.getRow(startRow).getCell(startCol + 5))));
    }

    // Helper method to get cell value as String
    private static String getCellValue(Cell cell) {
        if (cell == null) return "";
        switch (cell.getCellType()) {
            case STRING:
                return cell.getStringCellValue();
            case NUMERIC:
                return String.valueOf(cell.getNumericCellValue());
            case BOOLEAN:
                return String.valueOf(cell.getBooleanCellValue());
            case FORMULA:
                return cell.getCellFormula();
            default:
                return "";
        }
    }

    // Helper method to normalize whitespace
    private static String normalizeWhitespace(String value) {
        if (value == null) return "";
        return value.trim().replaceAll("\\s+", " ");
    }
}

