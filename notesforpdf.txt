import org.apache.pdfbox.pdmodel.PDDocument;
import org.apache.pdfbox.text.PDFTextStripper;
import org.apache.poi.ss.usermodel.*;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;

import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

public class PDFTableExtractor {
    public static void main(String[] args) throws IOException {
        File pdfFile = new File("path/to/your/pdf-file.pdf");
        File excelFile = new File("path/to/save/extracted-tables.xlsx");

        // Load PDF document
        try (PDDocument document = PDDocument.load(pdfFile)) {
            PDFTextStripper stripper = new PDFTextStripper();

            // Use a list to store rows of the table we extract
            List<List<String>> tableRows = new ArrayList<>();

            // Process each page
            for (int i = 1; i <= document.getNumberOfPages(); i++) {
                stripper.setStartPage(i);
                stripper.setEndPage(i);

                String pageText = stripper.getText(document);

                // Check if this page contains the specific headers
                if (pageText.contains("Code") && pageText.contains("Mod1") &&
                    pageText.contains("Mod2") && pageText.contains("Mod3") &&
                    pageText.contains("Mod4") && pageText.contains("Rates")) {

                    // Use a regular expression or manual parsing to extract table rows
                    List<String> rows = extractTableRows(pageText);
                    for (String row : rows) {
                        // Split by whitespace, tabs, or commas based on your table's format
                        String[] columns = row.split("\\s+");
                        tableRows.add(List.of(columns));
                    }
                }
            }

            // Write extracted table data to Excel
            writeDataToExcel(tableRows, excelFile);
        }
    }

    private static List<String> extractTableRows(String pageText) {
        // Add code here to identify the rows of the table based on specific patterns.
        // This can be a custom regular expression or any other logic to find rows.
        List<String> rows = new ArrayList<>();
        // Sample logic to get rows:
        String[] lines = pageText.split("\n");
        boolean inTable = false;
        for (String line : lines) {
            if (line.contains("Code") && line.contains("Rates")) {
                inTable = true; // Start of the table
            } else if (inTable && line.trim().isEmpty()) {
                break; // End of the table
            } else if (inTable) {
                rows.add(line);
            }
        }
        return rows;
    }

    private static void writeDataToExcel(List<List<String>> tableRows, File excelFile) throws IOException {
        Workbook workbook = new XSSFWorkbook();
        Sheet sheet = workbook.createSheet("Extracted Table");

        int rowNum = 0;
        for (List<String> rowData : tableRows) {
            Row row = sheet.createRow(rowNum++);
            int colNum = 0;
            for (String cellData : rowData) {
                Cell cell = row.createCell(colNum++);
                cell.setCellValue(cellData);
            }
        }

        try (FileOutputStream outputStream = new FileOutputStream(excelFile)) {
            workbook.write(outputStream);
        }
    }
}

<dependency>
    <groupId>org.apache.pdfbox</groupId>
    <artifactId>pdfbox</artifactId>
    <version>2.0.27</version>
</dependency>
<dependency>
    <groupId>org.apache.poi</groupId>
    <artifactId>poi</artifactId>
    <version>5.2.3</version>
</dependency>
<dependency>
    <groupId>org.apache.poi</groupId>
    <artifactId>poi-ooxml</artifactId>
    <version>5.2.3</version>
</dependency>


*****************************************************************************

import technology.tabula.Page;
import technology.tabula.Table;
import technology.tabula.extractors.SpreadsheetExtractionAlgorithm;
import technology.tabula.extractors.ExtractionAlgorithm;
import technology.tabula.ObjectExtractor;
import technology.tabula.PageIterator;
import org.apache.pdfbox.pdmodel.PDDocument;
import org.apache.poi.ss.usermodel.*;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;

import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.util.List;

public class PDFTableToExcel {
    public static void main(String[] args) {
        String pdfFilePath = "path/to/your/500-page-document.pdf";
        String excelFilePath = "path/to/save/extracted-tables.xlsx";
        int targetPage = 50; // Set this to the specific page you need

        try {
            // Load PDF Document
            PDDocument document = PDDocument.load(new File(pdfFilePath));
            ObjectExtractor extractor = new ObjectExtractor(document);

            // Specify the target page for table extraction
            Page page = extractor.extract(targetPage);
            ExtractionAlgorithm algo = new SpreadsheetExtractionAlgorithm();

            // Extract tables from the specified page
            List<Table> tables = algo.extract(page);
            document.close();

            // Write the extracted tables to Excel
            writeTablesToExcel(tables, excelFilePath);
            System.out.println("Table extracted and saved to Excel successfully!");

        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private static void writeTablesToExcel(List<Table> tables, String excelFilePath) throws IOException {
        Workbook workbook = new XSSFWorkbook();
        Sheet sheet = workbook.createSheet("Extracted Table");

        int rowNum = 0;
        for (Table table : tables) {
            for (int i = 0; i < table.getRowCount(); i++) {
                Row row = sheet.createRow(rowNum++);
                for (int j = 0; j < table.getColCount(); j++) {
                    Cell cell = row.createCell(j);
                    cell.setCellValue(table.getCell(i, j).getText());
                }
            }
        }

        try (FileOutputStream outputStream = new FileOutputStream(excelFilePath)) {
            workbook.write(outputStream);
        }
    }
}

<dependency>
    <groupId>org.apache.pdfbox</groupId>
    <artifactId>pdfbox</artifactId>
    <version>2.0.27</version>
</dependency>
<dependency>
    <groupId>technology.tabula</groupId>
    <artifactId>tabula</artifactId>
    <version>1.0.4</version>
</dependency>
<dependency>
    <groupId>org.apache.poi</groupId>
    <artifactId>poi</artifactId>
    <version>5.2.3</version>
</dependency>
<dependency>
    <groupId>org.apache.poi</groupId>
    <artifactId>poi-ooxml</artifactId>
    <version>5.2.3</version>
</dependency>



