import org.apache.poi.ss.usermodel.*;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.sql.*;
import java.util.*;
import java.util.stream.Collectors;

public class ChangeFileProcessor {

    private static final String CHANGE_FILE_PATH = "./src/main/resources/ChangeFile.xlsx";
    private static final String QUERIES_FILE_PATH = "./src/main/resources/Queries.xlsx";
    private static final String OUTPUT_DIR = "C:/users/sqlreports/";
    private static final String DB_URL = "jdbc:sqlserver://localhost;databaseName=yourDatabase";
    private static final String DB_USER = "yourUsername";
    private static final String DB_PASSWORD = "yourPassword";

    public static void main(String[] args) {
        try (var changeFile = new XSSFWorkbook(new FileInputStream(new File(CHANGE_FILE_PATH)));
             var queryFile = new XSSFWorkbook(new FileInputStream(new File(QUERIES_FILE_PATH)))) {

            var changeSheet = changeFile.getSheetAt(0);
            var querySheet = queryFile.getSheetAt(0);

            var queries = extractQueries(querySheet);
            var changeRows = extractRelevantRows(changeSheet);

            var groupedRows = groupRowsByAction(changeRows);

            groupedRows.forEach((action, rows) -> {
                try {
                    switch (action) {
                        case "New Code" -> processAction(rows, queries.get("Query 1"), "New Code");
                        case "Rate Change" -> processAction(rows, queries.get("Query 2"), "Rate Change");
                        case "Termination" -> processAction(rows, queries.get("Query 2"), "Termination");
                        default -> System.err.println("Unknown action: " + action);
                    }
                } catch (SQLException e) {
                    e.printStackTrace();
                }
            });

            System.out.println("Processing completed. Results saved in: " + OUTPUT_DIR);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private static Map<String, String> extractQueries(Sheet querySheet) {
        return querySheet.rowIterator().next().stream()
                .collect(Collectors.toMap(
                        row -> row.getCell(0).getStringCellValue(),
                        row -> row.getCell(1).getStringCellValue()
                ));
    }

    private static List<Row> extractRelevantRows(Sheet sheet) {
        return sheet.rowIterator()
                .next().stream()
                .filter(row -> row.getCell(10) != null && !row.getCell(10).getStringCellValue().isEmpty()) // Column K
                .toList();
    }

    private static Map<String, List<Row>> groupRowsByAction(List<Row> rows) {
        return rows.stream()
                .collect(Collectors.groupingBy(row -> row.getCell(10).getStringCellValue())); // Group by Action column
    }

    private static void processAction(List<Row> rows, String queryTemplate, String action) throws SQLException {
        var groupedByDate = rows.stream()
                .collect(Collectors.groupingBy(row ->
                        row.getCell(6).getDateCellValue() + "-" + row.getCell(7).getDateCellValue()
                ));

        try (var connection = DriverManager.getConnection(DB_URL, DB_USER, DB_PASSWORD)) {
            for (var entry : groupedByDate.entrySet()) {
                var procIds = entry.getValue().stream()
                        .map(row -> row.getCell(1).getStringCellValue()) // Column B
                        .collect(Collectors.joining(", "));
                var feeScheduleId = entry.getValue().get(0).getCell(0).getStringCellValue(); // Column A
                var eff = entry.getValue().get(0).getCell(6).getStringCellValue(); // Column G
                var term = entry.getValue().get(0).getCell(7).getStringCellValue(); // Column H

                var query = """
                        %s
                        """.formatted(queryTemplate)
                        .replace(":PROCID", procIds)
                        .replace(":FSHID", feeScheduleId)
                        .replace(":EFF", eff)
                        .replace(":TERM", term);

                executeQuery(connection, query, action);
            }
        }
    }

    private static void executeQuery(Connection connection, String query, String action) throws SQLException {
        try (var stmt = connection.prepareStatement(query)) {
            var success = stmt.execute();
            if (success) {
                saveResults(action, stmt.getResultSet());
            }
        }
    }

    private static void saveResults(String action, ResultSet resultSet) throws SQLException {
        try (var workbook = new XSSFWorkbook();
             var fileOut = new FileOutputStream(new File(OUTPUT_DIR + action + "_Results.xlsx"))) {

            var sheet = workbook.createSheet("Results");
            var metaData = resultSet.getMetaData();
            var columnCount = metaData.getColumnCount();

            var headerRow = sheet.createRow(0);
            for (int i = 1; i <= columnCount; i++) {
                headerRow.createCell(i - 1).setCellValue(metaData.getColumnName(i));
            }

            int rowIndex = 1;
            while (resultSet.next()) {
                var row = sheet.createRow(rowIndex++);
                for (int i = 1; i <= columnCount; i++) {
                    row.createCell(i - 1).setCellValue(resultSet.getString(i));
                }
            }
            workbook.write(fileOut);
        }
    }
}


private static Map<String, String> extractQueries(Sheet querySheet) {
    return StreamSupport.stream(querySheet.spliterator(), false)
            .filter(row -> row.getCell(0) != null && row.getCell(1) != null)
            .collect(Collectors.toMap(
                    row -> row.getCell(0).getStringCellValue(),
                    row -> row.getCell(1).getStringCellValue()
            ));
}

import java.util.stream.Stream;
import java.util.stream.StreamSupport;

private static List<Row> extractRelevantRows(Sheet sheet) {
    return StreamSupport.stream(sheet.spliterator(), false)
            .filter(row -> {
                Cell actionCell = row.getCell(10); // Column K
                return actionCell != null && !actionCell.getStringCellValue().isEmpty();
            })
            .toList(); // Available in Java 16+, or use `collect(Collectors.toList())` for earlier versions
}
