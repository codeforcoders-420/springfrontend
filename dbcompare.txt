import org.apache.poi.ss.usermodel.*;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.sql.*;
import java.util.*;
import java.util.stream.Collectors;

public class ChangeFileProcessor {

    private static final String CHANGE_FILE_PATH = "./src/main/resources/ChangeFile.xlsx";
    private static final String QUERIES_FILE_PATH = "./src/main/resources/Queries.xlsx";
    private static final String OUTPUT_DIR = "C:/users/sqlreports/";
    private static final String DB_URL = "jdbc:sqlserver://localhost;databaseName=yourDatabase";
    private static final String DB_USER = "yourUsername";
    private static final String DB_PASSWORD = "yourPassword";

    public static void main(String[] args) {
        try (var changeFile = new XSSFWorkbook(new FileInputStream(new File(CHANGE_FILE_PATH)));
             var queryFile = new XSSFWorkbook(new FileInputStream(new File(QUERIES_FILE_PATH)))) {

            var changeSheet = changeFile.getSheetAt(0);
            var querySheet = queryFile.getSheetAt(0);

            var queries = extractQueries(querySheet);
            var changeRows = extractRelevantRows(changeSheet);

            var groupedRows = groupRowsByAction(changeRows);

            groupedRows.forEach((action, rows) -> {
                try {
                    switch (action) {
                        case "New Code" -> processAction(rows, queries.get("Query 1"), "New Code");
                        case "Rate Change" -> processAction(rows, queries.get("Query 2"), "Rate Change");
                        case "Termination" -> processAction(rows, queries.get("Query 2"), "Termination");
                        default -> System.err.println("Unknown action: " + action);
                    }
                } catch (SQLException e) {
                    e.printStackTrace();
                }
            });

            System.out.println("Processing completed. Results saved in: " + OUTPUT_DIR);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private static Map<String, String> extractQueries(Sheet querySheet) {
        return querySheet.rowIterator().next().stream()
                .collect(Collectors.toMap(
                        row -> row.getCell(0).getStringCellValue(),
                        row -> row.getCell(1).getStringCellValue()
                ));
    }

    private static List<Row> extractRelevantRows(Sheet sheet) {
        return sheet.rowIterator()
                .next().stream()
                .filter(row -> row.getCell(10) != null && !row.getCell(10).getStringCellValue().isEmpty()) // Column K
                .toList();
    }

    private static Map<String, List<Row>> groupRowsByAction(List<Row> rows) {
        return rows.stream()
                .collect(Collectors.groupingBy(row -> row.getCell(10).getStringCellValue())); // Group by Action column
    }

    private static void processAction(List<Row> rows, String queryTemplate, String action) throws SQLException {
        var groupedByDate = rows.stream()
                .collect(Collectors.groupingBy(row ->
                        row.getCell(6).getDateCellValue() + "-" + row.getCell(7).getDateCellValue()
                ));

        try (var connection = DriverManager.getConnection(DB_URL, DB_USER, DB_PASSWORD)) {
            for (var entry : groupedByDate.entrySet()) {
                var procIds = entry.getValue().stream()
                        .map(row -> row.getCell(1).getStringCellValue()) // Column B
                        .collect(Collectors.joining(", "));
                var feeScheduleId = entry.getValue().get(0).getCell(0).getStringCellValue(); // Column A
                var eff = entry.getValue().get(0).getCell(6).getStringCellValue(); // Column G
                var term = entry.getValue().get(0).getCell(7).getStringCellValue(); // Column H

                var query = """
                        %s
                        """.formatted(queryTemplate)
                        .replace(":PROCID", procIds)
                        .replace(":FSHID", feeScheduleId)
                        .replace(":EFF", eff)
                        .replace(":TERM", term);

                executeQuery(connection, query, action);
            }
        }
    }

    private static void executeQuery(Connection connection, String query, String action) throws SQLException {
        try (var stmt = connection.prepareStatement(query)) {
            var success = stmt.execute();
            if (success) {
                saveResults(action, stmt.getResultSet());
            }
        }
    }

    private static void saveResults(String action, ResultSet resultSet) throws SQLException {
        try (var workbook = new XSSFWorkbook();
             var fileOut = new FileOutputStream(new File(OUTPUT_DIR + action + "_Results.xlsx"))) {

            var sheet = workbook.createSheet("Results");
            var metaData = resultSet.getMetaData();
            var columnCount = metaData.getColumnCount();

            var headerRow = sheet.createRow(0);
            for (int i = 1; i <= columnCount; i++) {
                headerRow.createCell(i - 1).setCellValue(metaData.getColumnName(i));
            }

            int rowIndex = 1;
            while (resultSet.next()) {
                var row = sheet.createRow(rowIndex++);
                for (int i = 1; i <= columnCount; i++) {
                    row.createCell(i - 1).setCellValue(resultSet.getString(i));
                }
            }
            workbook.write(fileOut);
        }
    }
}


private static Map<String, String> extractQueries(Sheet querySheet) {
    return StreamSupport.stream(querySheet.spliterator(), false)
            .filter(row -> row.getCell(0) != null && row.getCell(1) != null)
            .collect(Collectors.toMap(
                    row -> row.getCell(0).getStringCellValue(),
                    row -> row.getCell(1).getStringCellValue()
            ));
}

import java.util.stream.Stream;
import java.util.stream.StreamSupport;

private static List<Row> extractRelevantRows(Sheet sheet) {
    return StreamSupport.stream(sheet.spliterator(), false)
            .filter(row -> {
                Cell actionCell = row.getCell(10); // Column K
                return actionCell != null && !actionCell.getStringCellValue().isEmpty();
            })
            .toList(); // Available in Java 16+, or use `collect(Collectors.toList())` for earlier versions
}

****************************************************************

private static void processAction(List<Row> rows, String queryTemplate, String action) throws SQLException {
    var groupedByDate = rows.stream()
            .collect(Collectors.groupingBy(row -> {
                String effDate = getCellValueAsString(row.getCell(6)); // Column G
                String termDate = getCellValueAsString(row.getCell(7)); // Column H
                return effDate + "-" + termDate;
            }));

    try (var connection = DriverManager.getConnection(DB_URL, DB_USER, DB_PASSWORD)) {
        for (var entry : groupedByDate.entrySet()) {
            var procIds = entry.getValue().stream()
                    .map(row -> row.getCell(1).getStringCellValue()) // Column B
                    .collect(Collectors.joining(", "));
            var feeScheduleId = entry.getValue().get(0).getCell(0).getStringCellValue(); // Column A
            var eff = getCellValueAsString(entry.getValue().get(0).getCell(6)); // Column G
            var term = getCellValueAsString(entry.getValue().get(0).getCell(7)); // Column H

            var query = queryTemplate
                    .replace(":PROCID", procIds)
                    .replace(":FSHID", feeScheduleId)
                    .replace(":EFF", eff)
                    .replace(":TERM", term);

            executeQuery(connection, query, action);
        }
    }
}

private static String getCellValueAsString(Cell cell) {
    if (cell == null) {
        return "";
    }
    return switch (cell.getCellType()) {
        case STRING -> cell.getStringCellValue();
        case NUMERIC -> {
            if (DateUtil.isCellDateFormatted(cell)) {
                yield cell.getLocalDateTimeCellValue().toLocalDate().toString(); // Convert date to ISO string
            } else {
                yield String.valueOf(cell.getNumericCellValue());
            }
        }
        case BOOLEAN -> String.valueOf(cell.getBooleanCellValue());
        case FORMULA -> cell.getCellFormula();
        default -> "";
    };
}

*************************************************************************************

import javafx.application.Application;
import javafx.scene.Scene;
import javafx.scene.control.*;
import javafx.scene.layout.VBox;
import javafx.stage.FileChooser;
import javafx.stage.Stage;
import org.apache.poi.ss.usermodel.*;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;

import java.io.*;
import java.sql.*;
import java.time.LocalDate;
import java.util.*;
import java.util.stream.Collectors;

public class ChangeFileProcessorWithUI extends Application {

    private File changeFile;
    private LocalDate prodDeployedDate;

    private static final String OUTPUT_DIR = "C:/users/sqlreports/";
    private static final String QUERIES_FILE_PATH = "./src/main/resources/Queries.xlsx";
    private static final String DB_URL = "jdbc:sqlserver://localhost;databaseName=yourDatabase";
    private static final String DB_USER = "yourUsername";
    private static final String DB_PASSWORD = "yourPassword";

    public static void main(String[] args) {
        launch(args);
    }

    @Override
    public void start(Stage primaryStage) {
        primaryStage.setTitle("Change File Processor");

        Label fileLabel = new Label("Select Change File:");
        Button fileButton = new Button("Choose File");
        Label selectedFileLabel = new Label("No file selected");

        fileButton.setOnAction(e -> {
            FileChooser fileChooser = new FileChooser();
            fileChooser.getExtensionFilters().add(new FileChooser.ExtensionFilter("Excel Files", "*.xlsx"));
            changeFile = fileChooser.showOpenDialog(primaryStage);
            if (changeFile != null) {
                selectedFileLabel.setText(changeFile.getAbsolutePath());
            }
        });

        Label dateLabel = new Label("Enter Prod Deployed Date:");
        DatePicker datePicker = new DatePicker();

        Button processButton = new Button("Process");
        processButton.setOnAction(e -> {
            if (changeFile == null || datePicker.getValue() == null) {
                showAlert(Alert.AlertType.ERROR, "Missing Input", "Please select a file and a date.");
                return;
            }

            prodDeployedDate = datePicker.getValue();
            try {
                processChangeFile();
                showAlert(Alert.AlertType.INFORMATION, "Success", "Processing completed. Results saved in: " + OUTPUT_DIR);
            } catch (Exception ex) {
                ex.printStackTrace();
                showAlert(Alert.AlertType.ERROR, "Error", "An error occurred during processing: " + ex.getMessage());
            }
        });

        VBox layout = new VBox(10, fileLabel, fileButton, selectedFileLabel, dateLabel, datePicker, processButton);
        Scene scene = new Scene(layout, 400, 300);
        primaryStage.setScene(scene);
        primaryStage.show();
    }

    private void processChangeFile() throws Exception {
        try (var changeWorkbook = new XSSFWorkbook(new FileInputStream(changeFile));
             var queryWorkbook = new XSSFWorkbook(new FileInputStream(new File(QUERIES_FILE_PATH)));
             var outputWorkbook = new XSSFWorkbook()) {

            var changeSheet = changeWorkbook.getSheetAt(0);
            var querySheet = queryWorkbook.getSheetAt(0);
            var outputSheet = outputWorkbook.createSheet("Results");

            var queries = extractQueries(querySheet);
            var changeRows = extractRelevantRows(changeSheet);
            var groupedRows = groupRowsByAction(changeRows);

            int outputRowIndex = 0;

            for (var entry : groupedRows.entrySet()) {
                String action = entry.getKey();
                List<Row> rows = entry.getValue();

                switch (action) {
                    case "New Code" -> outputRowIndex = processAction(rows, queries.get("Query 1"), action, outputSheet, outputRowIndex);
                    case "Rate Change", "Termination" -> outputRowIndex = processAction(rows, queries.get("Query 2"), action, outputSheet, outputRowIndex);
                }
            }

            try (var fileOut = new FileOutputStream(new File(OUTPUT_DIR + "Combined_Report.xlsx"))) {
                outputWorkbook.write(fileOut);
            }
        }
    }

    private static Map<String, String> extractQueries(Sheet querySheet) {
        Map<String, String> queries = new HashMap<>();
        for (Row row : querySheet) {
            Cell keyCell = row.getCell(0);
            Cell valueCell = row.getCell(1);
            if (keyCell != null && valueCell != null) {
                queries.put(keyCell.getStringCellValue(), valueCell.getStringCellValue());
            }
        }
        return queries;
    }

    private static List<Row> extractRelevantRows(Sheet sheet) {
        List<Row> relevantRows = new ArrayList<>();
        for (Row row : sheet) {
            Cell actionCell = row.getCell(10);
            if (actionCell != null && !actionCell.getStringCellValue().isEmpty()) {
                relevantRows.add(row);
            }
        }
        return relevantRows;
    }

    private static Map<String, List<Row>> groupRowsByAction(List<Row> rows) {
        return rows.stream()
                .collect(Collectors.groupingBy(row -> row.getCell(10).getStringCellValue())); // Group by Action column
    }

    private int processAction(List<Row> rows, String queryTemplate, String action, Sheet outputSheet, int outputRowIndex) throws SQLException {
        var groupedByDate = rows.stream()
                .collect(Collectors.groupingBy(row ->
                        row.getCell(6).getStringCellValue() + "-" + row.getCell(7).getStringCellValue()
                ));

        try (var connection = DriverManager.getConnection(DB_URL, DB_USER, DB_PASSWORD)) {
            for (var entry : groupedByDate.entrySet()) {
                var procIds = entry.getValue().stream()
                        .map(row -> row.getCell(1).getStringCellValue())
                        .collect(Collectors.joining(", "));
                var feeScheduleId = entry.getValue().get(0).getCell(0).getStringCellValue();
                var eff = entry.getValue().get(0).getCell(6).getStringCellValue();
                var term = prodDeployedDate.toString();

                var query = queryTemplate
                        .replace(":PROCID", procIds)
                        .replace(":FSHID", feeScheduleId)
                        .replace(":EFF", eff)
                        .replace(":TERM", term);

                try (var stmt = connection.prepareStatement(query)) {
                    if (stmt.execute()) {
                        outputRowIndex = writeResultsToOutputSheet(stmt.getResultSet(), outputSheet, action, outputRowIndex);
                    }
                }
            }
        }
        return outputRowIndex;
    }

    private int writeResultsToOutputSheet(ResultSet resultSet, Sheet outputSheet, String action, int startRowIndex) throws SQLException {
        var metaData = resultSet.getMetaData();
        int columnCount = metaData.getColumnCount();

        while (resultSet.next()) {
            var row = outputSheet.createRow(startRowIndex++);
            for (int i = 1; i <= columnCount; i++) {
                row.createCell(i - 1).setCellValue(resultSet.getString(i));
            }
            row.createCell(columnCount).setCellValue(action); // Add Action Code as the last column
        }
        return startRowIndex;
    }

    private void showAlert(Alert.AlertType type, String title, String content) {
        Alert alert = new Alert(type);
        alert.setTitle(title);
        alert.setContentText(content);
        alert.showAndWait();
    }
}


private int writeResultsToOutputSheet(ResultSet resultSet, Sheet outputSheet, String action, int startRowIndex) throws SQLException {
    ResultSetMetaData metaData = resultSet.getMetaData();
    int columnCount = metaData.getColumnCount();

    // If this is the first set of results, write the column headers
    if (startRowIndex == 0) {
        Row headerRow = outputSheet.createRow(startRowIndex++);
        for (int i = 1; i <= columnCount; i++) {
            headerRow.createCell(i - 1).setCellValue(metaData.getColumnName(i));
        }
        headerRow.createCell(columnCount).setCellValue("Action"); // Add "Action" as the last column header
    }

    // Write the result set rows
    while (resultSet.next()) {
        Row row = outputSheet.createRow(startRowIndex++);
        for (int i = 1; i <= columnCount; i++) {
            row.createCell(i - 1).setCellValue(resultSet.getString(i));
        }
        row.createCell(columnCount).setCellValue(action); // Add Action Code as the last column
    }

    return startRowIndex;
}

