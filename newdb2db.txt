import java.util.*;
import java.util.stream.Collectors;

public class DataComparison {

    public static void main(String[] args) {
        // Example devMap and targetMap initialization
        Map<Object, Map<String, Object>> devMap = new HashMap<>();
        Map<Object, Map<String, Object>> targetMap = new HashMap<>();

        // Populate devMap and targetMap with test data here...

        // Perform comparison and get results
        List<Map<String, Object>> comparisonResults = compareData(devMap, targetMap);

        // Generate report (output to Excel or other desired formats)
        generateReport(comparisonResults, "DEV", "TARGET");
    }

    private static List<Map<String, Object>> compareData(Map<Object, Map<String, Object>> devMap,
                                                         Map<Object, Map<String, Object>> targetMap) {

        List<Map<String, Object>> result = new ArrayList<>();

        // Remove exact matches
        Iterator<Object> devIterator = devMap.keySet().iterator();
        while (devIterator.hasNext()) {
            Object compositeKey = devIterator.next();
            if (targetMap.containsKey(compositeKey) &&
                    devMap.get(compositeKey).equals(targetMap.get(compositeKey))) {
                devIterator.remove();
                targetMap.remove(compositeKey);
            }
        }

        // Compare remaining rows in devMap
        for (Object compositeKey : devMap.keySet()) {
            Map<String, Object> devRow = devMap.get(compositeKey);
            Map<String, Object> targetRow = targetMap.get(compositeKey);

            if (targetRow != null) {
                // Matching primary key, compare non-key columns
                List<String> differences = devRow.keySet().stream()
                        .filter(column -> !isPrimaryKeyColumn(column)) // Skip primary key columns
                        .filter(column -> !Objects.equals(devRow.get(column), targetRow.get(column)))
                        .collect(Collectors.toList());

                if (!differences.isEmpty()) {
                    Map<String, Object> diffRow = new LinkedHashMap<>(devRow);
                    diffRow.put("Difference", String.join(", ", differences) + " mismatch");
                    result.add(diffRow);
                }
            } else {
                // Primary key exists in source but not in target
                Map<String, Object> diffRow = new LinkedHashMap<>(devRow);
                diffRow.put("Difference", "New Entry in Source, not exist in Target");
                result.add(diffRow);
            }
        }

        // Compare remaining rows in targetMap
        for (Object compositeKey : targetMap.keySet()) {
            if (!devMap.containsKey(compositeKey)) {
                Map<String, Object> targetRow = targetMap.get(compositeKey);
                Map<String, Object> diffRow = new LinkedHashMap<>(targetRow);
                diffRow.put("Difference", "Exist only in target & not exist in source");
                result.add(diffRow);
            }
        }

        return result;
    }

    // Helper method to check if a column is part of the primary key
    private static boolean isPrimaryKeyColumn(String column) {
        List<String> primaryKeyColumns = List.of("Proc", "Mod1", "Mod2", "Mod3", "Mod4");
        return primaryKeyColumns.contains(column);
    }

    // Method to create a composite key for a row
    private static String createCompositeKey(Map<String, Object> row) {
        List<String> primaryKeyColumns = List.of("Proc", "Mod1", "Mod2", "Mod3", "Mod4");
        return primaryKeyColumns.stream()
                .map(column -> String.valueOf(row.get(column))) // Convert column value to String
                .collect(Collectors.joining("_"));              // Concatenate with a separator (e.g., "_")
    }

    // Generate Excel report
    private static void generateReport(List<Map<String, Object>> data, String sourceEnv, String targetEnv) {
        String fileName = String.format("%s_to_%s_Comparison.xlsx", sourceEnv, targetEnv);

        try (Workbook workbook = new XSSFWorkbook();
             FileOutputStream fileOut = new FileOutputStream(fileName)) {
            Sheet sheet = workbook.createSheet("Comparison Report");

            // Write header row
            if (!data.isEmpty()) {
                Row headerRow = sheet.createRow(0);
                int headerCellIndex = 0;
                for (String key : data.get(0).keySet()) {
                    headerRow.createCell(headerCellIndex++).setCellValue(key);
                }
            }

            // Write data rows
            int rowIndex = 1;
            for (Map<String, Object> rowData : data) {
                Row row = sheet.createRow(rowIndex++);
                int cellIndex = 0;
                for (Object value : rowData.values()) {
                    row.createCell(cellIndex++).setCellValue(value != null ? value.toString() : "");
                }
            }

            workbook.write(fileOut);
            System.out.println("Report generated: " + fileName);

        } catch (Exception e) {
            e.printStackTrace();
        }
    }
}
