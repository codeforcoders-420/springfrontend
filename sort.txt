import org.apache.poi.ss.usermodel.*;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.util.Arrays;

public class ExcelSortColumn {
    public static void main(String[] args) {
        String filePath = "Mockupdata.xlsx"; // Path to your Excel file
        String sheetName = "Sheet1";        // Name of the sheet
        int inputColumn = 15;               // Column P (0-based index is 15)
        int outputColumn = 16;              // Column Q (0-based index is 16)

        try (FileInputStream fis = new FileInputStream(filePath);
             Workbook workbook = new XSSFWorkbook(fis)) {

            // Access the desired sheet
            Sheet sheet = workbook.getSheet(sheetName);

            // Loop through the rows and process data in Column P
            for (Row row : sheet) {
                Cell inputCell = row.getCell(inputColumn);

                if (inputCell != null && inputCell.getCellType() == CellType.STRING) {
                    // Split values in Column P by commas, trim spaces, and sort
                    String[] values = inputCell.getStringCellValue().split(",");
                    Arrays.sort(values, (a, b) -> {
                        String numA = a.substring(1).matches("\\d+") ? a.substring(1).trim() : a.trim();
                        String numB = b.substring(1).matches("\\d+") ? b.substring(1).trim() : b.trim();
                        try {
                            return Integer.compare(Integer.parseInt(numA), Integer.parseInt(numB));
                        } catch (NumberFormatException e) {
                            return a.compareTo(b);
                        }
                    });

                    // Join sorted values back into a single string
                    String sortedValues = String.join(", ", values);

                    // Write the sorted result to Column Q
                    Cell outputCell = row.createCell(outputColumn, CellType.STRING);
                    outputCell.setCellValue(sortedValues);
                }
            }

            // Write the updated workbook back to the file
            try (FileOutputStream fos = new FileOutputStream(filePath)) {
                workbook.write(fos);
                System.out.println("Sorting and writing to Column Q completed successfully.");
            }

        } catch (IOException e) {
            e.printStackTrace();
        }
    }
}
